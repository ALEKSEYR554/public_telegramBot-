class FishSocket
  module Listener
    # This module assigned to processing all standart messages
    module StandartMessages
      def process
        if Listener.message.text.to_s.include? "/start code_check_"
          @code=Listener.message.text.to_s[18..-1]
          Listener.message.text="/start code_check_"
        end
        case Listener.message.text
        when '/start', '–∫–æ–º–∞–Ω–¥—ã','/commands'
          Listener::Response.std_message("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ /rules.\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–º–∞–Ω–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        when 'fff'
          Listener::Response.force_reply_message("file_id_send")
        when '/rules', '/start rules',"–ü—Ä–∞–≤–∏–ª–∞‚ùóÔ∏è"
          Listener::Response.std_message(Bot_Texts::RULES,"main")
        when '/admin_commands',"admin_commandsüßë‚Äçüíª"
          return false if not Listener::Codes.is_admin?
          Listener::Response.inline_message("–ú–µ–Ω—é:", Listener::Response.generate_inline_markup([
            Inline_Button::ADD_FULL,
            Inline_Button::SEND_FILES,
            Inline_Button::REPLACE_DB_FILE,
            Inline_Button::SEND_MESSAGE_BY_ID
        ]), false)
        when "–ù–∞–∑–∞–¥üîô"
          Listener::Response.std_message("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ","main")
      when "/donat" ,"/start donat","–î–æ–Ω–∞—Çüí∏"
          Listener::Response.std_message(Bot_Texts::DONAT_TEXT,"donat")
          #Listener::Response.std_message(") #–ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @Panic_mode –∏–ª–∏ @ALEKSEYR554")
        when "/temat_day", "/start temat_day", "–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π_–¥–µ–Ω—åüëë"
          Listener::Response.std_message(Bot_Texts::TEMAT_DAY_TEXT,"donat")
        when "/author_request", "/start author_request", "–ó–∞–∫–∞–∑–∞—Ç—å_–∞–≤—Ç–æ—Ä–∞üåÑ"
          Listener::Response.std_message(Bot_Texts::AUTHOR_REQUEST,"donat")
        when "/donation","/start donation","–î–æ–Ω–∞—Çüíµ"
          Listener::Response.std_message("–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–∞","donat")
        when "/reviews","/start reviews","–û—Ç–∑—ã–≤—ãüíé"
          Listener::Response.std_message(Bot_Texts::REVIEW_TEXT,"donat")
        when "/code_check", "/start code_check","–ü—Ä–æ–≤–µ—Ä–∏—Ç—å_–∫–æ–¥üëÄ"
          Listener::Response.force_reply_message('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0')
        when "/start code_check_"
          return Listener::Response.std_message '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' if not Codes.check_and_send_full(@code)
          @code=nil
        when "/review"
          Listener::Response.force_reply_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª")
        when "/post_suggest", "/start post_suggest","–ü—Ä–µ–¥–ª–æ–∂–∫–∞üî∏"
          @last_id=0
          Listener::Response.force_reply_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å")
        when "/pls_find_full", "/start pls_find_full","–ü–æ–ø—Ä–æ—Å–∏—Ç—å_—Ñ—É–ª–ªüôè"
          @last_id=0
          Listener::Response.std_message(Bot_Texts::PLS_FIND_FULL_TEXT,"main")
          if File.read("date.txt").count("\n")!=3
            day,current_left,max_left=Time.now.day,10,10
          else
            day,current_left,max_left=File.read("date.txt").split
          end
          day,current_left,max_left=day.to_i,current_left.to_i,max_left.to_i
          if Time.now.day.to_i != day
            current_left=max_left
            day=Time.now.day
          end
          if current_left.<=0
            Listener::Response.std_message("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞")
          else
            Listener::Response.force_reply_message(Bot_Texts::REQUEST_TEXT)
            File.open("date.txt", "w+") do |f|
              f.puts([day,current_left,max_left]) end
          end
        else
          unless Listener.message.reply_to_message.nil?
            case Listener.message.reply_to_message.text
            when /–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              #return Listener::Response.std_message '–ö–æ–¥—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /code_check' if Listener::Codes.is_code
              return false if not @last_id==0
              @last_id=1
              Listener.bot.api.send_message(chat_id:TelegramConstants::SUGGEST_CHANNEL_ID,text:"–ü–ñ –í–´–õ–û–ñ–ò–¢–ï \n –ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: <code>#{Listener.message.from.id}</code> \n –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å @#{Listener.message.from.username}",parse_mode: 'html')
              Listener::Response.fully_copy_and_send_message(TelegramConstants::SUGGEST_CHANNEL_ID)
              Listener::Response.std_message("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É","main")
            when /file_id_send/
              Listener::Response.send_photo(Listener.message.text.to_s)
            when /–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª/
              Listener::Response.forward_message(TelegramConstants::REVIEW_CHANNEL_ID,Listener.message.chat.id)
              Listener::Response.std_message(Bot_Texts::REVIEW_SENDED,"main")
            when /–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–ª–ª–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              #return Listener::Response.std_message '–ö–æ–¥—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /code_check' if Listener::Codes.is_code
              return false if not @last_id==0
              @last_id=1
              cont=File.read("date.txt").split
              current_left=cont[1].to_i-1
              cont[1]=current_left
              File.open("date.txt", "w+") do |f|
                f.puts(cont) end
              Listener.bot.api.send_message(chat_id:TelegramConstants::SUGGEST_CHANNEL_ID,text:"–ù–ê–ô–¢–ò –§–£–õ–õ –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è #{current_left} \n –ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: <code>#{Listener.message.from.id}</code> \n –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å @#{Listener.message.from.username}",parse_mode: 'html')
              Listener::Response.fully_copy_and_send_message(TelegramConstants::SUGGEST_CHANNEL_ID)
              #Listener::Response.forward_message(-1001732598335, Listener.message, "pls_find_full","#{current_left}")
              Listener::Response.std_message("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–∏—Å–∫","main")
            when /–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞\n blacklist, admin_list, date, code_to_full/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              case Listener.message.text#.to_s
              when 'blacklist'
                Listener::Response.std_message("–í–≤–æ–¥–∏—Ç—å –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø—Ä–∏–º–µ—Ä:\n 7417404 3412415 41251512")
                Listener::Response.force_reply_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ blacklist.txt")
              when "admin_list"
                Listener::Response.std_message("–í–≤–æ–¥–∏—Ç—å –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø—Ä–∏–º–µ—Ä:\n 7417404 3412415 41251512")
                Listener::Response.force_reply_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ admin_list.txt")
              when "date"
                Listener::Response.std_message("—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ_—á–∏—Å–ª–æ –æ—Å—Ç–∞–ª–æ—Å—å_–Ω–∞_—Å–µ–≥–æ–¥–Ω—è –º–∞–∫—Å_–Ω–∞_–¥–µ–Ω—å –Ω–∞–ø—Ä–∏–º–µ—Ä:\n 15 10 10")
                Listener::Response.force_reply_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ date.txt")
              when "code_to_full"
                Listener::Response.send_document(Faraday::UploadIO.new("code_to_full.txt","txt"))
                Listener::Response.force_reply_message("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º code_to_full.txt")
              end
            when /–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º code_to_full.txt/
              file=Listener.bot.api.get_file(file_id:"#{Listener::Codes.file_id_get()[0][0]}").dig('result','file_path').to_s
              File.write("code_to_full.txt",(URI.open("https://api.telegram.org/file/bot#{TelegramConstants::API_KEY}/#{file}").read.to_s))
              Listener::Response.std_message("–î–∞–Ω–Ω—ã–µ code_to_full.txt –∑–∞–º–µ–Ω–µ–Ω—ã")
              Listener::Response.send_document(Faraday::UploadIO.new("code_to_full.txt","txt"),TelegramConstants::ERROR_CHANNEL_ID)
            when /–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ blacklist.txt/
              File.open("blacklist.txt", "w+") do |f|
                f.puts(Listener.message.text.split(" "))
              end
              Listener::Response.std_message("–î–∞–Ω–Ω—ã–µ blacklist.txt –∑–∞–º–µ–Ω–µ–Ω—ã")
              Listener::Response.send_document(Faraday::UploadIO.new("blacklist.txt","txt"),TelegramConstants::ERROR_CHANNEL_ID)
            when /–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ admin_list.txt/
              File.open("admin_list.txt", "w+") do |f|
                f.puts(Listener.message.text.split(" "))
              end
              Listener::Response.std_message("–î–∞–Ω–Ω—ã–µ admin_list.txt –∑–∞–º–µ–Ω–µ–Ω—ã")
            when /–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ date.txt/
              File.open("date.txt", "w+") do |f|
                f.puts(Listener.message.text.split(" "))
              end
              Listener::Response.std_message("–î–∞–Ω–Ω—ã–µ date.txt –∑–∞–º–µ–Ω–µ–Ω—ã")
            when /–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              return Listener::Response.std_message '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' if not Codes.check_and_send_full(Listener.message.text)
            when /–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤ –∞–¥–º–∏–Ω—ã, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0/#–ù–ï –†–ê–ë–û–ê–ï–¢
              return Listener::Response.std_message '–≠–¢–û –ù–ï –†–ê–ë–û–ê–ï–¢ –ù–ï –¢–†–û–ì–ê–¢–¨ –ê–î–ú–ò–ù–ê –í –†–£–ß–ù–£–Æ –î–û–ë–ê–í–õ–Ø–ï–ú'
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text =="0"
              Listener::Response.std_message("#{Listener.message.forward_from.id.to_s}")
              Database.db.execute("insert into admin_list values ( ? )", Listener.message.forward_from.id.to_s)
            when /–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              @last_id=0
              #@id=Listener.message.text.to_s
              Listener::Response.force_reply_message("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è #{Listener.message.text.to_s}")
            when /–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              begin
              return false if @last_id==Listener.message.date#@last_id+1==Listener.message.message_id.to_i or @last_id+2==Listener.message.message_id.to_i
              @last_id=Listener.message.date
              id = Listener.message.reply_to_message.text[31..-1]
              Listener::Response.fully_copy_and_send_message(id)
              #Listener::Response.forward_message(@id,Listener.message)
              Listener::Response.std_message("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")
              Listener::Response.inline_message("–∫–Ω–æ–ø–∫–∞:", Listener::Response.generate_inline_markup([
                Telegram::Bot::Types::InlineKeyboardButton.new(text:"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ #{id}",callback_data:"send_review_#{id}"),
            ]), false)
              rescue
                Listener::Response.std_message("–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
              end
            when /–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞1234' if Listener.message.text.to_s=="0"
              #Listener::Response.std_message("#{Listener.message}")
              @last=0
              Listener::Response.force_reply_message("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ—É–ª–ª –¥–ª—è –∫–æ–¥–∞ #{Listener.message.text}")
            when /–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ—É–ª–ª –¥–ª—è –∫–æ–¥–∞/
              return Listener::Response.std_message '–û—Ç–º–µ–Ω–∞' if Listener.message.text.to_s=="0"
              return Listener::Response.std_message '–í—ã –Ω–µ –∞–¥–º–∏–Ω' if not Listener::Codes.is_admin?
              code=Listener.message.reply_to_message.text.to_s[31..-1]
              return if Listener.message.date ==@last
              @last=Listener.message.date
              a=Listener::Codes.file_id_get().each_slice(10).to_a
              a.map{|e|
              e=e.to_s.gsub!(", ",",") if e.to_s.include?(", ")
              e=e.to_s.gsub!(" ","_") if e.to_s.include?(" ")
              File.write('code_to_full.txt', "#{code} #{e}\n", mode: 'a')
              }
              #Listener::Response.force_reply_message('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0') if a
              #a=a.to_s.gsub!(", ",",")
              #a=a.to_s.gsub!(" ","_") if a.to_s.include?(" ")
              #File.write('code_to_full.txt', "#{code} #{a}\n", mode: 'a')
              #File.write('stat.txt', "#{Listener.message.text}\n", mode: 'a')
              Listener::Response.std_message("#{code} #{a}\n")
              Listener::Response.std_message("#{Bot_Texts::BOT_LINK}?start=code_check_#{code}")
              Listener::Response.send_document(Faraday::UploadIO.new("code_to_full.txt","txt"),TelegramConstants::ERROR_CHANNEL_ID)
              #Database.db.execute("INSERT INTO codes_to_full_message_list VALUES (?, ?)", ["#{Listener.message.text}", "#{@a}"])
            end
          end
                  #Response.std_message "#{Listener.message.forward_from_chat.id}"
        end
      end
      module_function(
        :process
      )

    end
  end
end
